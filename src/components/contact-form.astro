---
import Label from "@/components/ui/label.astro"
import Action from "@/components/ui/action.astro"
import Textfield from "@/components/ui/textfield.astro"
---

<form id="contact-form" class="form">
  <Label>
    <span class="label">Nombre</span>
    <Textfield
      data-is-action
      placeholder="Pepito Perez Pepian"
      name="name"
      autocomplete="name"
      required
    />
  </Label>

  <Label>
    <span class="label">Correo</span>
    <Textfield
      data-is-action
      placeholder="pepito@perez.com"
      type="email"
      name="email"
      autocomplete="email"
      required
    />
  </Label>

  <Label>
    <span class="label">Mensaje</span>
    <Textfield
      data-is-action
      multiline
      placeholder="Hola Dresan, (Tu bonito mensaje)"
      name="message"
      required
    />
  </Label>

  <Action data-is-action as="button" size="medium" type="submit">Enviar</Action>

  <p id="status-message" class="status-message hidden" aria-live="polite" role="status"></p>
</form>

<script>
  import { $, $$ } from "@/utils/dom-selector"
  import { FORM_BASE_URL } from "@/constants/urls"

  const $contactForm = $("#contact-form")!
  const $statusMessage = $("#status-message")!
  const $formActions = $$<HTMLFormElement>("#contact-form > [data-is-action]")

  const RESET_MESSAGE_TIME = 6000
  const formId = import.meta.env.PUBLIC_FORM_ID
  const url = `${FORM_BASE_URL}/${formId}`

  const showMessage = (message: string, type: "success" | "error") => {
    $statusMessage.textContent = message
    $statusMessage.classList.remove("hidden", "error", "success")
    $statusMessage.classList.add(type)
  }

  const hideMessage = () => {
    $statusMessage.classList.add("hidden")
    $statusMessage.textContent = ""
  }

  $contactForm.addEventListener("submit", async (e) => {
    const form = e.target as HTMLFormElement

    form.checkValidity()
    e.preventDefault()

    const formData = new FormData(form)
    const formDataObject = Object.fromEntries(formData.entries())

    $formActions.forEach((el) => el.setAttribute("disabled", "true"))

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formDataObject),
      })

      if (!response.ok) {
        showMessage(`Error en la solicitud: CÃ³digo ${response.status}.`, "error")
        return
      }

      showMessage("Gracias por tu mensaje ðŸ©µ, responderÃ© lo antes posible.", "success")
      form.reset()
    } catch (err) {
      showMessage("Algo saliÃ³ mal, intenta mÃ¡s tarde.", "error")
    } finally {
      $formActions.forEach((el) => el.removeAttribute("disabled"))
      setTimeout(hideMessage, RESET_MESSAGE_TIME)
    }
  })
</script>

<style>
  .form {
    display: flex;
    flex-direction: column;
    row-gap: 20px;
    padding-block-start: 24px;
  }

  .label {
    display: inline-block;
    padding-block-end: 8px;
  }

  .status-message {
    padding: 12px;
    text-align: center;
    border: 1px solid;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.3s ease-in-out;
  }

  .hidden {
    display: none;
  }

  .success {
    --color-hsl: 194 100% 43%;
    border-color: hsl(var(--color-hsl));
    background-color: hsl(var(--color-hsl) / 0.2);
  }

  .error {
    --color-hsl: 349 100% 43%;
    border-color: hsl(var(--color-hsl));
    background-color: hsl(var(--color-hsl) / 0.2);
  }
</style>
